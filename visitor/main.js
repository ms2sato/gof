// Generated by CoffeeScript 1.6.3
(function() {
  var BasicNode, BasicVisitor, CompositeNode, NodeEditor, TextEditVisitor, TextLeafNode, compositeNodeTemplate, nodeEditorTemplate, textNodeTemplate, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  textNodeTemplate = "<div class=\"node\">\n    <div class=\"content text\">テスト</div>\n</div>";

  BasicNode = (function() {
    function BasicNode() {}

    BasicNode.prototype.accept = function(visitor, options) {
      return visitor.visit(this, options);
    };

    BasicNode.prototype.setBackgroundColor = function(color) {
      return this.$el.css('backgroundColor', color);
    };

    return BasicNode;

  })();

  TextLeafNode = (function(_super) {
    __extends(TextLeafNode, _super);

    function TextLeafNode() {
      _ref = TextLeafNode.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextLeafNode.prototype.setup = function($parent) {
      var editor;
      this.$parent = $parent;
      this.$el = $(textNodeTemplate).appendTo(this.$parent);
      editor = new NodeEditor(this);
      return editor.setup();
    };

    TextLeafNode.prototype.setText = function(text) {
      var $textContent;
      $textContent = this.$el.find('.text.content');
      return $textContent.text(text);
    };

    return TextLeafNode;

  })(BasicNode);

  compositeNodeTemplate = "<div class=\"node\">\n    <ul class=\"content composite\"></ul>\n</div>";

  CompositeNode = (function(_super) {
    __extends(CompositeNode, _super);

    function CompositeNode() {
      this.nodes = [];
    }

    CompositeNode.prototype.forEach = function(callback) {
      return this.nodes.forEach(callback);
    };

    CompositeNode.prototype.accept = function(visitor, options) {
      return this.forEach(function(node) {
        return visitor.visit(node, options);
      });
    };

    CompositeNode.prototype.setBackgroundColor = function(color) {
      CompositeNode.__super__.setBackgroundColor.call(this, color);
      return this.forEach(function(node) {
        return node.setBackgroundColor(color);
      });
    };

    CompositeNode.prototype.setup = function($parent) {
      var editor,
        _this = this;
      this.$parent = $parent;
      this.$el = $(compositeNodeTemplate).appendTo(this.$parent);
      this.forEach(function(node) {
        var $li;
        $li = $('<li></li>').appendTo(_this.$el.find('>ul'));
        return node.setup($li);
      });
      editor = new NodeEditor(this);
      return editor.setup();
    };

    CompositeNode.prototype.addNode = function(node) {
      return this.nodes.push(node);
    };

    return CompositeNode;

  })(BasicNode);

  BasicVisitor = (function() {
    function BasicVisitor() {}

    BasicVisitor.prototype.visit = function(obj, options) {
      return this['visit' + obj.constructor.name](obj, options);
    };

    BasicVisitor.prototype.visitCompositeNode = function(compositeNode, options) {
      var _this = this;
      return compositeNode.forEach(function(node) {
        return _this.visit(node, options);
      });
    };

    return BasicVisitor;

  })();

  TextEditVisitor = (function(_super) {
    __extends(TextEditVisitor, _super);

    function TextEditVisitor() {
      _ref1 = TextEditVisitor.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TextEditVisitor.prototype.visitTextLeafNode = function(textLeafNode, options) {
      return textLeafNode.setText(options.text);
    };

    return TextEditVisitor;

  })(BasicVisitor);

  NodeEditor = (function() {
    function NodeEditor(node) {
      this.node = node;
      this.visitors = {
        textEdit: new TextEditVisitor()
      };
    }

    NodeEditor.prototype.setup = function() {
      var $editor,
        _this = this;
      $editor = $(nodeEditorTemplate).appendTo(this.node.$el);
      $editor.find('.changeText').click(function() {
        var $text;
        $text = $editor.find('[name=text]');
        return _this.node.accept(_this.visitors.textEdit, {
          text: $text.val()
        });
      });
      $editor.find('.red').click(function() {
        return _this.node.setBackgroundColor('red');
      });
      return $editor.find('.blue').click(function() {
        return _this.node.setBackgroundColor('blue');
      });
    };

    return NodeEditor;

  })();

  nodeEditorTemplate = " <div class=\"editor\">\n    <input name=\"text\" type=\"text\" value=\"aaaa\">\n    <button class=\"changeText\">テキストの変更</button>\n    <button class=\"red\">赤</button>\n    <button class=\"blue\">青</button>\n</div>";

  $(function() {
    var cnode, node;
    cnode = new CompositeNode();
    cnode.addNode(new TextLeafNode());
    cnode.addNode(new TextLeafNode());
    node = new CompositeNode();
    node.addNode(new TextLeafNode());
    node.addNode(cnode);
    node.addNode(new TextLeafNode());
    return node.setup($('body'));
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
