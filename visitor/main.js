// Generated by CoffeeScript 1.6.3
(function() {
  var BasicNode, BasicVisitor, CompositeNode, HTMLExportingVisitor, HrLeafNode, NodeEditor, TextEditVisitor, TextExportingVisitor, TextLeafNode, compositeNodeTemplate, hrNodeTemplate, nodeEditorTemplate, textNodeTemplate, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BasicNode = (function() {
    function BasicNode() {}

    BasicNode.prototype.accept = function(visitor, options, level) {
      return visitor.visit(this, options, level);
    };

    BasicNode.prototype.setBackgroundColor = function(color) {
      this.backgroundColor = color;
      return this.$el.css('backgroundColor', color);
    };

    BasicNode.prototype.getBackgroundColor = function() {
      return this.backgroundColor;
    };

    return BasicNode;

  })();

  compositeNodeTemplate = "<div class=\"node\">\n    <ul class=\"content composite\"></ul>\n</div>";

  CompositeNode = (function(_super) {
    __extends(CompositeNode, _super);

    function CompositeNode() {
      this.nodes = [];
    }

    CompositeNode.prototype.forEach = function(callback) {
      return this.nodes.forEach(callback);
    };

    CompositeNode.prototype.accept = function(visitor, options, level) {
      var my_level;
      my_level = {
        value: (level != null ? level.value : void 0) ? level.value + 1 : 1
      };
      return this.forEach(function(node) {
        return node.accept(visitor, options, my_level);
      });
    };

    CompositeNode.prototype.setBackgroundColor = function(color) {
      CompositeNode.__super__.setBackgroundColor.call(this, color);
      return this.forEach(function(node) {
        return node.setBackgroundColor(color);
      });
    };

    CompositeNode.prototype.setup = function($parent) {
      var editor,
        _this = this;
      this.$parent = $parent;
      this.$el = $(compositeNodeTemplate).appendTo(this.$parent);
      this.forEach(function(node) {
        var $li;
        $li = $('<li></li>').appendTo(_this.$el.find('>ul'));
        return node.setup($li);
      });
      editor = new NodeEditor(this);
      return editor.setup();
    };

    CompositeNode.prototype.addNode = function(node) {
      return this.nodes.push(node);
    };

    return CompositeNode;

  })(BasicNode);

  textNodeTemplate = "<div class=\"node\">\n    <div class=\"content text\">テスト</div>\n</div>";

  TextLeafNode = (function(_super) {
    __extends(TextLeafNode, _super);

    function TextLeafNode() {
      _ref = TextLeafNode.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextLeafNode.prototype.setup = function($parent) {
      var editor;
      this.$parent = $parent;
      this.$el = $(textNodeTemplate).appendTo(this.$parent);
      editor = new NodeEditor(this);
      return editor.setup();
    };

    TextLeafNode.prototype.setText = function(text) {
      var $textContent;
      $textContent = this.$el.find('.text.content');
      return $textContent.text(text);
    };

    TextLeafNode.prototype.getText = function() {
      var $textContent;
      $textContent = this.$el.find('.text.content');
      return $textContent.text();
    };

    return TextLeafNode;

  })(BasicNode);

  hrNodeTemplate = "<div class=\"node\">\n    <hr class=\"content hr\">\n</div>";

  HrLeafNode = (function(_super) {
    __extends(HrLeafNode, _super);

    function HrLeafNode() {
      _ref1 = HrLeafNode.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    HrLeafNode.prototype.setup = function($parent) {
      this.$parent = $parent;
      return this.$el = $(hrNodeTemplate).appendTo(this.$parent);
    };

    return HrLeafNode;

  })(BasicNode);

  BasicVisitor = (function() {
    function BasicVisitor() {}

    BasicVisitor.prototype.visit = function(obj, options, level) {
      var method;
      method = this['visit' + obj.constructor.name];
      if (method) {
        return method.call(this, obj, options, level);
      } else {
        return unmatchedNode(obj, options, level);
      }
    };

    BasicVisitor.prototype.visitCompositeNode = function(compositeNode, options, level) {
      var _this = this;
      return compositeNode.forEach(function(node) {
        return _this.visit(node, options, level);
      });
    };

    BasicVisitor.prototype.unmachedNode = function(obj, options, level) {};

    return BasicVisitor;

  })();

  TextEditVisitor = (function(_super) {
    __extends(TextEditVisitor, _super);

    function TextEditVisitor() {
      _ref2 = TextEditVisitor.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TextEditVisitor.prototype.visitTextLeafNode = function(textLeafNode, options) {
      return textLeafNode.setText(options.text);
    };

    TextEditVisitor.prototype.visitHrLeafNode = function(hrLeafNode, options) {};

    return TextEditVisitor;

  })(BasicVisitor);

  HTMLExportingVisitor = (function(_super) {
    __extends(HTMLExportingVisitor, _super);

    function HTMLExportingVisitor() {
      this.content = '';
    }

    HTMLExportingVisitor.prototype.visitTextLeafNode = function(textLeafNode, options) {
      var bg, start;
      bg = textLeafNode.getBackgroundColor();
      start = bg ? "<div style=\"background-color: " + bg + "\">" : '<div>';
      return this.content += start + textLeafNode.getText() + "</div>\n";
    };

    HTMLExportingVisitor.prototype.visitHrLeafNode = function(hrLeafNode, options) {
      return this.content += '<hr>\n';
    };

    return HTMLExportingVisitor;

  })(BasicVisitor);

  TextExportingVisitor = (function(_super) {
    __extends(TextExportingVisitor, _super);

    function TextExportingVisitor() {
      this.content = '';
    }

    TextExportingVisitor.prototype.visitTextLeafNode = function(textLeafNode, options, level) {
      return this.content += this.getIndent(level) + textLeafNode.getText() + "\n";
    };

    TextExportingVisitor.prototype.visitHrLeafNode = function(hrLeafNode, options, level) {
      return this.content += this.getIndent(level) + '--- \n';
    };

    TextExportingVisitor.prototype.getIndent = function(level) {
      var i, indent, _i, _ref3;
      indent = '';
      for (i = _i = 1, _ref3 = level.value; 1 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 1 <= _ref3 ? ++_i : --_i) {
        indent += '>';
      }
      return indent;
    };

    return TextExportingVisitor;

  })(BasicVisitor);

  NodeEditor = (function() {
    function NodeEditor(node, tpl) {
      this.node = node;
      this.tpl = tpl != null ? tpl : nodeEditorTemplate;
      this.visitors = {
        textEdit: new TextEditVisitor()
      };
    }

    NodeEditor.prototype.setup = function() {
      var $editor,
        _this = this;
      $editor = $(this.tpl).appendTo(this.node.$el);
      $editor.find('.changeText').click(function() {
        var $text;
        $text = $editor.find('[name=text]');
        return _this.node.accept(_this.visitors.textEdit, {
          text: $text.val()
        });
      });
      $editor.find('.red').click(function() {
        return _this.node.setBackgroundColor('red');
      });
      return $editor.find('.blue').click(function() {
        return _this.node.setBackgroundColor('blue');
      });
    };

    return NodeEditor;

  })();

  nodeEditorTemplate = " <div class=\"editor\">\n    <input name=\"text\" type=\"text\" value=\"aaaa\">\n    <button class=\"changeText\">テキストの変更</button>\n    <button class=\"red\">赤</button>\n    <button class=\"blue\">青</button>\n</div>";

  $(function() {
    var cnode, node;
    cnode = new CompositeNode();
    cnode.addNode(new TextLeafNode());
    cnode.addNode(new TextLeafNode());
    cnode.addNode(new HrLeafNode());
    cnode.addNode(new TextLeafNode());
    node = new CompositeNode();
    node.addNode(new TextLeafNode());
    node.addNode(cnode);
    node.addNode(new TextLeafNode());
    node.setup($('#nodes'));
    $('#actions .html').click(function() {
      var htmlExporter;
      htmlExporter = new HTMLExportingVisitor();
      node.accept(htmlExporter, {});
      return $('#field').text(htmlExporter.content);
    });
    return $('#actions .text').click(function() {
      var textExporter;
      textExporter = new TextExportingVisitor();
      node.accept(textExporter, {});
      return $('#field').text(textExporter.content);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
